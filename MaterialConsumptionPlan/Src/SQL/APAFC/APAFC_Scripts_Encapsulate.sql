-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
-- Description:
--
--  This file just use for test new functions, procedures, package..
--
-- Revision History:
--
--    Date        Developer         Description
--    ---------   ---------------   ----------------------------------------------------
--    2014-12-24  Moyue           	Scripts Collections.
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------

--Execute Immediate function encapsulate.
create or replace PROCEDURE APAFC_SCRIPT_EXE_IMMEDIATE(
    SQL_EXE IN VARCHAR2) AUTHID CURRENT_USER
IS
  PROCESS_TERMINATED EXCEPTION;
BEGIN
  EXECUTE IMMEDIATE SQL_EXE;
EXCEPTION
WHEN OTHERS THEN
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('Execute Script:'||SUBSTR(SQL_EXE,1,100));
  DBMS_OUTPUT.PUT_LINE('Execute Error:');
  DBMS_OUTPUT.PUT_LINE(SUBSTR(DBMS_UTILITY.FORMAT_ERROR_STACK,1,200)||SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,200));
  RAISE PROCESS_TERMINATED;
END APAFC_SCRIPT_EXE_IMMEDIATE;

--DBMS_OUTPUT PUT_LINE encapsulate
CREATE OR REPLACE PROCEDURE APAFC_MSG_PRINT(
	MSG IN VARCHAR2) AUTHID CURRENT_USER
IS	
	PROCESS_TERMINATED EXCEPTION;
BEGIN
	DBMS_OUTPUT.PUT_LINE(MSG);
EXCEPTION
WHEN OTHERS THEN
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('Execute Script:'||SUBSTR(MSG,1,100));
  DBMS_OUTPUT.PUT_LINE('Execute Error:');
  DBMS_OUTPUT.PUT_LINE(SUBSTR(DBMS_UTILITY.FORMAT_ERROR_STACK,1,200)||SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,200));
  RAISE PROCESS_TERMINATED;
END APAFC_MSG_PRINT;


--DROP encapsulate
CREATE OR REPLACE PROCEDURE APAFC_DROP(
	DROP_NAME IN VARCHAR2,DROP_TYPE IN VARCHAR2) AUTHID CURRENT_USER
IS	
	PROCESS_TERMINATED EXCEPTION;
  DROP_SQL VARCHAR2(300);
BEGIN
  DROP_SQL := 'DROP '|| DROP_TYPE ||' '||DROP_NAME;
  APAFC_MSG_PRINT(DROP_SQL);
  APAFC_SCRIPT_EXE_IMMEDIATE(DROP_SQL);
	APAFC_MSG_PRINT('Drop done.');
EXCEPTION
WHEN OTHERS THEN
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('Execute Script:'||SUBSTR(DROP_SQL,1,100));
  DBMS_OUTPUT.PUT_LINE('Execute Error:');
  DBMS_OUTPUT.PUT_LINE(SUBSTR(DBMS_UTILITY.FORMAT_ERROR_STACK,1,200)||SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,200));
  RAISE PROCESS_TERMINATED;
END APAFC_DROP;

--Truncate encapsulate
CREATE OR REPLACE PROCEDURE APAFC_TRUNCATE(
	TRUNCATE_NAME IN VARCHAR2) AUTHID CURRENT_USER
IS	
	PROCESS_TERMINATED EXCEPTION;
  TRUNCATE_SQL VARCHAR2(300);
BEGIN
  TRUNCATE_SQL := 'TRUNCATE TABLE '|| TRUNCATE_NAME;
  APAFC_SCRIPT_EXE_IMMEDIATE(TRUNCATE_SQL);
	APAFC_MSG_PRINT('TRUNCATE_SQL done.');
EXCEPTION
WHEN OTHERS THEN
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('Execute Script:'||SUBSTR(TRUNCATE_SQL,1,100));
  DBMS_OUTPUT.PUT_LINE('Execute Error:');
  DBMS_OUTPUT.PUT_LINE(SUBSTR(DBMS_UTILITY.FORMAT_ERROR_STACK,1,200)||SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,200));
  RAISE PROCESS_TERMINATED;
END APAFC_TRUNCATE;



--Insert encapsulate
CREATE OR REPLACE PROCEDURE APAFC_INSERT(
	VIEW_NAME IN VARCHAR2,TABLE_NAME IN VARCHAR2) AUTHID CURRENT_USER
IS	
	PROCESS_TERMINATED EXCEPTION;
  INSERT_SQL VARCHAR2(300);
BEGIN
  INSERT_SQL := 'INSERT INTO '||TABLE_NAME||' SELECT * FROM '|| VIEW_NAME;
  APAFC_SCRIPT_EXE_IMMEDIATE(INSERT_SQL);
  APAFC_MSG_PRINT(INSERT_SQL);
	APAFC_MSG_PRINT('TRUNCATE_SQL done.');
EXCEPTION
WHEN OTHERS THEN
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('Execute Script:'||SUBSTR(INSERT_SQL,1,100));
  DBMS_OUTPUT.PUT_LINE('Execute Error:');
  DBMS_OUTPUT.PUT_LINE(SUBSTR(DBMS_UTILITY.FORMAT_ERROR_STACK,1,200)||SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,200));
  RAISE PROCESS_TERMINATED;
END APAFC_INSERT;

BEGIN
APAFC_INSERT('VIEW_TEST_TABLE','TEST_TABLE');
end;

--CREATE SEQUENCE
CREATE OR REPLACE PROCEDURE APAFC_CREATE_SEQUENCE(
	SEQ_NAME IN VARCHAR2) AUTHID CURRENT_USER
IS	
	PROCESS_TERMINATED EXCEPTION;
	SEQ_SQL VARCHAR2(300);
BEGIN
	SEQ_SQL := 'CREATE SEQUENCE '||SEQ_NAME||' START WITH 1 INCREMENT BY 1 NOCYCLE NOMAXVALUE';
	APAFC_SCRIPT_EXE_IMMEDIATE(SEQ_SQL);
  APAFC_MSG_PRINT('Seq build done.');
EXCEPTION
WHEN OTHERS THEN
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('Execute Script:'||SUBSTR(SEQ_SQL,1,100));
  DBMS_OUTPUT.PUT_LINE('Execute Error:');
  DBMS_OUTPUT.PUT_LINE(SUBSTR(DBMS_UTILITY.FORMAT_ERROR_STACK,1,200)||SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,200));
  RAISE PROCESS_TERMINATED;
END APAFC_CREATE_SEQUENCE;

BEGIN
APAFC_CREATE_SEQUENCE('APAFC_LOGGING_SEQ');
end;

--Using oracle Sequence to provide the seed for logging ID.
CREATE OR REPLACE PROCEDURE APAFC_GET_SEED_SEQ(SEQ_VALUE OUT NUMBER)
IS	
	PROCESS_TERMINATED EXCEPTION;
BEGIN
  SELECT APAFC_LOGGING_SEQ.NEXTVAL INTO SEQ_VALUE FROM DUAL;
EXCEPTION
WHEN OTHERS THEN
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('Execute Error:');
  DBMS_OUTPUT.PUT_LINE(SUBSTR(DBMS_UTILITY.FORMAT_ERROR_STACK,1,200)||SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,200));
  RAISE PROCESS_TERMINATED;
END APAFC_GET_SEED_SEQ;

--Build Index for table
CREATE OR REPLACE PROCEDURE APAFC_CREATE_INDEX(
	INDEX_NAME IN VARCHAR2,INDEX_TABLE IN VARCHAR2,INDEX_EXPRESSION IN VARCHAR2) AUTHID CURRENT_USER
IS	
	PROCESS_TERMINATED EXCEPTION;
	INDEX_SQL VARCHAR2(300);
BEGIN
	INDEX_SQL := 'CREATE INDEX '||INDEX_NAME||' ON '||INDEX_TABLE||' ('||INDEX_EXPRESSION ||' ASC)';
	APAFC_SCRIPT_EXE_IMMEDIATE(INDEX_SQL);
  APAFC_MSG_PRINT('INDEX build done.');
EXCEPTION
WHEN OTHERS THEN
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('Execute Script:'||SUBSTR(INDEX_SQL,1,100));
  DBMS_OUTPUT.PUT_LINE('Execute Error:');
  DBMS_OUTPUT.PUT_LINE(SUBSTR(DBMS_UTILITY.FORMAT_ERROR_STACK,1,200)||SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,200));
  RAISE PROCESS_TERMINATED;
END APAFC_CREATE_INDEX;


---Timing Record
CREATE OR REPLACE PACKAGE TIMER
AUTHID CURRENT_USER
IS 
PROCEDURE START_TIMER;
PROCEDURE SHOW_ELAPSED(PROGRAM_NAME IN VARCHAR2,RUNNING_TIME OUT VARCHAR2);
END;

CREATE OR REPLACE PACKAGE BODY TIMER
IS
C_TIME_GAP NUMBER := POWER(2,32);
L_START_TIME PLS_INTEGER;

PROCEDURE START_TIMER
IS
BEGIN
L_START_TIME := DBMS_UTILITY.GET_TIME();
END;

PROCEDURE SHOW_ELAPSED(PROGRAM_NAME IN VARCHAR2,RUNNING_TIME OUT VARCHAR2)
AS
L_END_TIME VARCHAR2(100);
BEGIN
L_END_TIME := MOD(DBMS_UTILITY.GET_TIME() - L_START_TIME + C_TIME_GAP,C_TIME_GAP)/100;
RUNNING_TIME := L_END_TIME;
APAFC_MSG_PRINT(PROGRAM_NAME ||' has elapsed time '||L_END_TIME||' s.');
END;
END;

















BEGIN
APAFC_CREATE_INDEX('INDEX_R78_SOHST_MATLID','INV_SAP_R7B_SALES_SEA_HST','MATERIALID');
END;

DROP INDEX INDEX_R78_SOHST_MATLID;
CREATE INDEX INDEX_R78_SOHST_MATLID ON INV_SAP_R7B_SALES_SEA_HST (MATERIALID ASC)